{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrea Nardinocchi\\\\Desktop\\\\SETU\\\\GuestEase\\\\frontend\\\\src\\\\app.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Container, Typography, TextField, Select, MenuItem, Button, FormControl, InputLabel, Alert, Box, List, ListItem, ListItemText } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rooms = [{\n  id: 1,\n  name: \"Room 101\"\n}, {\n  id: 2,\n  name: \"Room 102\"\n}, {\n  id: 3,\n  name: \"Room 103\"\n}];\nfunction App() {\n  _s();\n  const [guestName, setGuestName] = useState(\"\");\n  const [selectedRoom, setSelectedRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const handleBooking = async () => {\n    setMessage(\"\");\n    setError(\"\");\n    if (!guestName || !selectedRoom) {\n      setError(\"Please enter your name and select a room.\");\n      return;\n    }\n    try {\n      const res = await fetch(\"http://localhost:5000/bookings\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          guestName,\n          roomName: selectedRoom\n        })\n      });\n      const data = await res.json();\n      if (res.ok) {\n        setMessage(`${data.booking.guestName} booked ${data.booking.roomName}`);\n        setGuestName(\"\");\n        setSelectedRoom(\"\");\n      } else {\n        setError(data.message || \"Error submitting booking\");\n      }\n    } catch {\n      setError(\"Failed to connect to the server\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    sx: {\n      mt: 5\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"GuestEase Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        gap: 2,\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Your Name\",\n        variant: \"outlined\",\n        value: guestName,\n        onChange: e => setGuestName(e.target.value),\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          children: \"Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: selectedRoom,\n          onChange: e => setSelectedRoom(e.target.value),\n          label: \"Room\",\n          children: rooms.map(room => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: room.name,\n            children: room.name\n          }, room.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleBooking,\n      fullWidth: true,\n      children: \"Book\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mt: 2\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mt: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        mt: 4\n      },\n      children: \"Available Rooms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: rooms.map(room => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: room.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)\n      }, room.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fKgqw9Em8E7G+jgMuqix6SBbxlg=\");\n_c = App;\nexport default App;\n\n/*\r\n\r\nExactly — good catch 👏\r\n\r\nThe version I gave you earlier used a simple in-memory Express backend, just to get everything running easily.\r\n\r\nIf you want to connect Supabase instead of keeping bookings in memory, we can do that in a few clean steps — and it’ll still stay very lightweight.\r\n\r\nHere’s how to add Supabase properly:\r\n\r\n🧩 Step 1: Set up a Supabase project\r\n\r\nGo to https://supabase.com\r\n\r\nCreate a free account\r\n\r\nCreate a new project (name it guestease)\r\n\r\nInside Table Editor, make a table called bookings with these columns:\r\n\r\nColumn\tType\tNotes\r\nid\tbigint\tPrimary key (auto increment)\r\nguest_name\ttext\t\r\nroom_name\ttext\t\r\n\r\nGo to Project Settings → API, and copy your:\r\n\r\nProject URL\r\n\r\nanon public API key\r\n\r\n🧰 Step 2: Install Supabase client in the frontend\r\n\r\nIn your frontend folder, run:\r\n\r\nnpm install @supabase/supabase-js\r\n\r\n🗝️ Step 3: Create a supabaseClient.js\r\n\r\nInside frontend/src/, make a new file called supabaseClient.js:\r\n\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst SUPABASE_URL = \"https://your-project-url.supabase.co\"\r\nconst SUPABASE_KEY = \"your-anon-key\"\r\n\r\nexport const supabase = createClient(SUPABASE_URL, SUPABASE_KEY)\r\n\r\n\r\n(Replace the values with your actual Supabase credentials.)\r\n\r\n⚛️ Step 4: Update App.js to use Supabase\r\n\r\nHere’s the new version of your App.js that saves bookings to Supabase instead of the Express backend:\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  Alert,\r\n  Box,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n} from \"@mui/material\";\r\nimport { supabase } from \"./supabaseClient\";\r\n\r\nfunction App() {\r\n  const [guestName, setGuestName] = useState(\"\");\r\n  const [selectedRoom, setSelectedRoom] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [bookings, setBookings] = useState([]);\r\n\r\n  const rooms = [\r\n    { id: 1, name: \"Room 101\" },\r\n    { id: 2, name: \"Room 102\" },\r\n    { id: 3, name: \"Room 103\" },\r\n  ];\r\n\r\n  // Fetch existing bookings\r\n  useEffect(() => {\r\n    fetchBookings();\r\n  }, []);\r\n\r\n  async function fetchBookings() {\r\n    const { data, error } = await supabase.from(\"bookings\").select(\"*\");\r\n    if (error) console.error(error);\r\n    else setBookings(data);\r\n  }\r\n\r\n  const handleBooking = async () => {\r\n    setMessage(\"\");\r\n    setError(\"\");\r\n\r\n    if (!guestName || !selectedRoom) {\r\n      setError(\"Please enter your name and select a room.\");\r\n      return;\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from(\"bookings\")\r\n      .insert([{ guest_name: guestName, room_name: selectedRoom }]);\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      setError(\"Failed to save booking\");\r\n    } else {\r\n      setMessage(`${guestName} booked ${selectedRoom}`);\r\n      setGuestName(\"\");\r\n      setSelectedRoom(\"\");\r\n      fetchBookings();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" sx={{ mt: 5 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        GuestEase (Supabase Demo)\r\n      </Typography>\r\n\r\n      <Box sx={{ display: \"flex\", gap: 2, mb: 2 }}>\r\n        <TextField\r\n          label=\"Your Name\"\r\n          variant=\"outlined\"\r\n          value={guestName}\r\n          onChange={(e) => setGuestName(e.target.value)}\r\n          fullWidth\r\n        />\r\n        <FormControl fullWidth>\r\n          <InputLabel>Room</InputLabel>\r\n          <Select\r\n            value={selectedRoom}\r\n            onChange={(e) => setSelectedRoom(e.target.value)}\r\n            label=\"Room\"\r\n          >\r\n            {rooms.map((room) => (\r\n              <MenuItem key={room.id} value={room.name}>\r\n                {room.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleBooking} fullWidth>\r\n        Book\r\n      </Button>\r\n\r\n      {message && <Alert severity=\"success\" sx={{ mt: 2 }}>{message}</Alert>}\r\n      {error && <Alert severity=\"error\" sx={{ mt: 2 }}>{error}</Alert>}\r\n\r\n      <Typography variant=\"h6\" sx={{ mt: 4 }}>\r\n        All Bookings\r\n      </Typography>\r\n      <List>\r\n        {bookings.map((b) => (\r\n          <ListItem key={b.id}>\r\n            <ListItemText primary={`${b.guest_name} → ${b.room_name}`} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n🚀 Step 5: Run the app again\r\nnpm start\r\n\r\n\r\nNow when you submit a booking, it will be saved directly in Supabase — no backend server needed!\r\n\r\nWould you like me to show you how to secure your Supabase connection (environment variables) next, so your keys aren’t visible in the code?\r\n\r\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Container","Typography","TextField","Select","MenuItem","Button","FormControl","InputLabel","Alert","Box","List","ListItem","ListItemText","jsxDEV","_jsxDEV","rooms","id","name","App","_s","guestName","setGuestName","selectedRoom","setSelectedRoom","message","setMessage","error","setError","handleBooking","res","fetch","method","headers","body","JSON","stringify","roomName","data","json","ok","booking","maxWidth","sx","mt","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","display","gap","mb","label","value","onChange","e","target","fullWidth","map","room","color","onClick","severity","primary","_c","$RefreshReg$"],"sources":["C:/Users/Andrea Nardinocchi/Desktop/SETU/GuestEase/frontend/src/app.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  Alert,\r\n  Box,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n} from \"@mui/material\";\r\n\r\nconst rooms = [\r\n  { id: 1, name: \"Room 101\" },\r\n  { id: 2, name: \"Room 102\" },\r\n  { id: 3, name: \"Room 103\" },\r\n];\r\n\r\nfunction App() {\r\n  const [guestName, setGuestName] = useState(\"\");\r\n  const [selectedRoom, setSelectedRoom] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleBooking = async () => {\r\n    setMessage(\"\");\r\n    setError(\"\");\r\n\r\n    if (!guestName || !selectedRoom) {\r\n      setError(\"Please enter your name and select a room.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/bookings\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ guestName, roomName: selectedRoom }),\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      if (res.ok) {\r\n        setMessage(`${data.booking.guestName} booked ${data.booking.roomName}`);\r\n        setGuestName(\"\");\r\n        setSelectedRoom(\"\");\r\n      } else {\r\n        setError(data.message || \"Error submitting booking\");\r\n      }\r\n    } catch {\r\n      setError(\"Failed to connect to the server\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" sx={{ mt: 5 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        GuestEase Demo\r\n      </Typography>\r\n\r\n      <Box sx={{ display: \"flex\", gap: 2, mb: 2 }}>\r\n        <TextField\r\n          label=\"Your Name\"\r\n          variant=\"outlined\"\r\n          value={guestName}\r\n          onChange={(e) => setGuestName(e.target.value)}\r\n          fullWidth\r\n        />\r\n\r\n        <FormControl fullWidth>\r\n          <InputLabel>Room</InputLabel>\r\n          <Select\r\n            value={selectedRoom}\r\n            onChange={(e) => setSelectedRoom(e.target.value)}\r\n            label=\"Room\"\r\n          >\r\n            {rooms.map((room) => (\r\n              <MenuItem key={room.id} value={room.name}>\r\n                {room.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={handleBooking}\r\n        fullWidth\r\n      >\r\n        Book\r\n      </Button>\r\n\r\n      {message && (\r\n        <Alert severity=\"success\" sx={{ mt: 2 }}>\r\n          {message}\r\n        </Alert>\r\n      )}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mt: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      <Typography variant=\"h6\" sx={{ mt: 4 }}>\r\n        Available Rooms\r\n      </Typography>\r\n      <List>\r\n        {rooms.map((room) => (\r\n          <ListItem key={room.id}>\r\n            <ListItemText primary={room.name} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n/*\r\n\r\nExactly — good catch 👏\r\n\r\nThe version I gave you earlier used a simple in-memory Express backend, just to get everything running easily.\r\n\r\nIf you want to connect Supabase instead of keeping bookings in memory, we can do that in a few clean steps — and it’ll still stay very lightweight.\r\n\r\nHere’s how to add Supabase properly:\r\n\r\n🧩 Step 1: Set up a Supabase project\r\n\r\nGo to https://supabase.com\r\n\r\nCreate a free account\r\n\r\nCreate a new project (name it guestease)\r\n\r\nInside Table Editor, make a table called bookings with these columns:\r\n\r\nColumn\tType\tNotes\r\nid\tbigint\tPrimary key (auto increment)\r\nguest_name\ttext\t\r\nroom_name\ttext\t\r\n\r\nGo to Project Settings → API, and copy your:\r\n\r\nProject URL\r\n\r\nanon public API key\r\n\r\n🧰 Step 2: Install Supabase client in the frontend\r\n\r\nIn your frontend folder, run:\r\n\r\nnpm install @supabase/supabase-js\r\n\r\n🗝️ Step 3: Create a supabaseClient.js\r\n\r\nInside frontend/src/, make a new file called supabaseClient.js:\r\n\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst SUPABASE_URL = \"https://your-project-url.supabase.co\"\r\nconst SUPABASE_KEY = \"your-anon-key\"\r\n\r\nexport const supabase = createClient(SUPABASE_URL, SUPABASE_KEY)\r\n\r\n\r\n(Replace the values with your actual Supabase credentials.)\r\n\r\n⚛️ Step 4: Update App.js to use Supabase\r\n\r\nHere’s the new version of your App.js that saves bookings to Supabase instead of the Express backend:\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  Alert,\r\n  Box,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n} from \"@mui/material\";\r\nimport { supabase } from \"./supabaseClient\";\r\n\r\nfunction App() {\r\n  const [guestName, setGuestName] = useState(\"\");\r\n  const [selectedRoom, setSelectedRoom] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [bookings, setBookings] = useState([]);\r\n\r\n  const rooms = [\r\n    { id: 1, name: \"Room 101\" },\r\n    { id: 2, name: \"Room 102\" },\r\n    { id: 3, name: \"Room 103\" },\r\n  ];\r\n\r\n  // Fetch existing bookings\r\n  useEffect(() => {\r\n    fetchBookings();\r\n  }, []);\r\n\r\n  async function fetchBookings() {\r\n    const { data, error } = await supabase.from(\"bookings\").select(\"*\");\r\n    if (error) console.error(error);\r\n    else setBookings(data);\r\n  }\r\n\r\n  const handleBooking = async () => {\r\n    setMessage(\"\");\r\n    setError(\"\");\r\n\r\n    if (!guestName || !selectedRoom) {\r\n      setError(\"Please enter your name and select a room.\");\r\n      return;\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from(\"bookings\")\r\n      .insert([{ guest_name: guestName, room_name: selectedRoom }]);\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      setError(\"Failed to save booking\");\r\n    } else {\r\n      setMessage(`${guestName} booked ${selectedRoom}`);\r\n      setGuestName(\"\");\r\n      setSelectedRoom(\"\");\r\n      fetchBookings();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" sx={{ mt: 5 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        GuestEase (Supabase Demo)\r\n      </Typography>\r\n\r\n      <Box sx={{ display: \"flex\", gap: 2, mb: 2 }}>\r\n        <TextField\r\n          label=\"Your Name\"\r\n          variant=\"outlined\"\r\n          value={guestName}\r\n          onChange={(e) => setGuestName(e.target.value)}\r\n          fullWidth\r\n        />\r\n        <FormControl fullWidth>\r\n          <InputLabel>Room</InputLabel>\r\n          <Select\r\n            value={selectedRoom}\r\n            onChange={(e) => setSelectedRoom(e.target.value)}\r\n            label=\"Room\"\r\n          >\r\n            {rooms.map((room) => (\r\n              <MenuItem key={room.id} value={room.name}>\r\n                {room.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleBooking} fullWidth>\r\n        Book\r\n      </Button>\r\n\r\n      {message && <Alert severity=\"success\" sx={{ mt: 2 }}>{message}</Alert>}\r\n      {error && <Alert severity=\"error\" sx={{ mt: 2 }}>{error}</Alert>}\r\n\r\n      <Typography variant=\"h6\" sx={{ mt: 4 }}>\r\n        All Bookings\r\n      </Typography>\r\n      <List>\r\n        {bookings.map((b) => (\r\n          <ListItem key={b.id}>\r\n            <ListItemText primary={`${b.guest_name} → ${b.room_name}`} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n🚀 Step 5: Run the app again\r\nnpm start\r\n\r\n\r\nNow when you submit a booking, it will be saved directly in Supabase — no backend server needed!\r\n\r\nWould you like me to show you how to secure your Supabase connection (environment variables) next, so your keys aren’t visible in the code?\r\n\r\n*/\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}